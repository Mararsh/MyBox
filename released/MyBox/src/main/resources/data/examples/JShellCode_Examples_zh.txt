##MyBox#
MyBoxTreeRoot;;;
JShell代码

##MyBox#
JShell代码
示例

##MyBox#
JShell代码 > 示例
对象

##MyBox#
JShell代码 > 示例 > 对象
字串
String exampleString = "hello";
exampleString += " world";
"包含e："+ exampleString.contains("e") + "    长度：" + exampleString.length();

##MyBox#
JShell代码 > 示例 > 对象
时间
import java.util.Date;
Date exampleDate = new Date();
"当前时间：" + exampleDate.toString() + "     值：" + exampleDate.getTime();

##MyBox#
JShell代码 > 示例 > 对象
数组
import java.util.Arrays;
double[] exampleArray =  new double[5];
for (int i=0; i<exampleArray.length; i++ ) {
    exampleArray[i] = i * 2;
}
exampleArray[2];

##MyBox#
JShell代码 > 示例 > 对象
列表
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
List<String> exampleList = new ArrayList<>();
exampleList.addAll(Arrays.asList("a", "b", "c", "d", "e"));
exampleList.toString();

##MyBox#
JShell代码 > 示例
表达式

##MyBox#
JShell代码 > 示例 > 表达式
数值计算

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
欧拉数
Math.E

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
圆周率
Math.PI

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
绝对值
Math.abs(-5.611)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
平方根
Math.sqrt(9)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
三次方根
Math.cbrt(27)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
幂
Math.pow(2,5)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
欧拉冥
Math.exp(2)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
自然对数（底为e）
Math.log(6)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
常用对数（底为10）
Math.log10(6)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
余弦
Math.cos(0)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
正弦
Math.sin(9)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
正切
Math.tan(5)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
反正切
Math.atan(-7.3)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
反余弦
Math.acos(0.5)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
反正弦
Math.asin(0.3)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
上舍入
Math.ceil(4.13)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
下舍入
Math.floor(4.67)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
四舍五入
Math.round(4.83)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
随机数
Math.random()

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
大值
Math.max(1,-3)

##MyBox#
JShell代码 > 示例 > 表达式 > 数值计算
小值
Math.min(1,-3)

##MyBox#
JShell代码 > 示例 > 表达式
字符串处理

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
忽略大小写的等于
"Hello".equalsIgnoreCase("hello")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
等于
"Hello".equals("hello")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
替换首个
"Hello World! World is yourself.".replace("World", "Feeling");

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
替换所有
"Hello World! World is yourself.".replaceAll("World", "Feeling");

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
开始于
"Hello".startsWith("h")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
结尾于
"Hello".endsWith("o")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
子串
"Hello".substring(2, 5)

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
字符
"hello".charAt(2)

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
连接
"hello".concat(" world")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
分割
"1,2,3,4".split(",")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
位置
"hello".indexOf("e")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
最后位置
"hello".lastIndexOf("l")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
长度
"hello".length()

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
小写
"Hello".toLowerCase()

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
大写
"Hello".toUpperCase()

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
包含
"Hello".contains("el")

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
删除首尾空白字符
" Hello  ".trim()

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
为空白字符串
"  ".isBlank()

##MyBox#
JShell代码 > 示例 > 表达式 > 字符串处理
为空
"".isEmpty()

##MyBox#
JShell代码 > 示例 > 表达式
布尔运算

##MyBox#
JShell代码 > 示例 > 表达式 > 布尔运算
列表包含
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
List<String> exampleListC = new ArrayList<>();
exampleListC.addAll(Arrays.asList("a", "b", "c", "d", "e"));
String exampleStringC = "c";
exampleListC.contains(exampleStringC);

##MyBox#
JShell代码 > 示例 > 表达式 > 布尔运算
字符串匹配
// MyBox类路径应当已添加到JShell环境中
import mara.mybox.tools.StringTools;
String exampleStringM = "abc1233hello";
String exampleRegexM = "\\S*3{2,}\\S*";  
boolean exampleCaseInsensitiveM = true;
StringTools.match(exampleStringM,exampleRegexM,exampleCaseInsensitiveM);

##MyBox#
JShell代码 > 示例 > 表达式 > 布尔运算
字符串包含
// MyBox类路径应当已添加到JShell环境中
import mara.mybox.tools.StringTools;
String exampleStringI = "abc1233hello";
String exampleRegexI = "3{2}";
boolean exampleCaseInsensitiveI = true;
StringTools.include(exampleStringI,exampleRegexI,exampleCaseInsensitiveI);

##MyBox#
JShell代码 > 示例 > 表达式 > 布尔运算
与/或/否
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
List<String> exampleListB = new ArrayList<>();
exampleListB.addAll(Arrays.asList("a", "b", "c", "d", "e"));
String exampleStringB = "c";
exampleListB.contains(exampleStringB) && 
(exampleListB.size() >= 8 || exampleStringB.length() != 1 || !exampleStringB.startsWith("h"));

##MyBox#
JShell代码 > 示例
方法

##MyBox#
JShell代码 > 示例 > 方法
圆的面积
double circleAreaByDiameter(double diameter) {        
    double radius = diameter / 2;        
    return   Math.PI *  radius * radius ;        
}
circleAreaByDiameter(120) + circleAreaByDiameter(30)

##MyBox#
JShell代码 > 示例 > 方法
四舍五入
import java.math.BigDecimal;        
import java.math.RoundingMode;        
double scale(double v, int scale) {        
    BigDecimal b = new BigDecimal(v);        
    return b.setScale(scale, RoundingMode.HALF_UP).doubleValue();        
}    
scale(Math.PI, 3)

##MyBox#
JShell代码 > 示例 > 方法
格式化数值
import java.math.BigDecimal;        
import java.math.RoundingMode;        
double scale(double v, int scale) {        
    BigDecimal b = new BigDecimal(v);        
    return b.setScale(scale, RoundingMode.HALF_UP).doubleValue();        
}        
                                     
import java.text.DecimalFormat;        
String formatDouble(double data, int scale) {        
    try {        
        String format = "#,###";        
        if (scale > 0) {        
            format += "." + "#".repeat(scale);        
        }        
        DecimalFormat df = new DecimalFormat(format);        
        return df.format(scale(data, scale));        
    } catch (Exception e) {        
        return e.toString();        
    }        
}        
                                     
double circleAreaByRadius(double radius) {        
    return   Math.PI *  radius * radius ;        
}        
                                     
formatDouble(circleAreaByRadius(273.4), 4)

##MyBox#
JShell代码 > 示例 > 方法
格式化时间
import java.util.Date;
import java.util.TimeZone;
import java.text.SimpleDateFormat;

String DatetimeFormat = "yyyy-MM-dd HH:mm:ss.SSS";

String datetimeToString(Date theDate, String format, TimeZone theZone) {
    if (theDate == null || theZone == null) {
            return null;
    }
    SimpleDateFormat formatter = new SimpleDateFormat(format);
    formatter.setTimeZone(theZone);
    String dateString = formatter.format(theDate);
    return dateString;
}

datetimeToString(new Date(), DatetimeFormat, TimeZone.getDefault());

##MyBox#
JShell代码 > 示例 > 方法
匹配字符串
import java.util.regex.Matcher;
import java.util.regex.Pattern;

boolean match(String string, String find, boolean isRegex,
            boolean dotAll, boolean multiline, boolean caseInsensitive) {
        if (string == null || find == null || find.isEmpty()) {
            return false;
        }
        try {
            int mode = (isRegex ? 0x00 : Pattern.LITERAL)
                    | (caseInsensitive ? Pattern.CASE_INSENSITIVE : 0x00)
                    | (dotAll ? Pattern.DOTALL : 0x00)
                    | (multiline ? Pattern.MULTILINE : 0x00);
            Pattern pattern = Pattern.compile(find, mode);
            Matcher matcher = pattern.matcher(string);
            return matcher.matches();
        } catch (Exception e) {
            return false;
        }
}

match("Hello1233World", "\\S*3{2,}\\S*", true, true, true, true);

##MyBox#
JShell代码 > 示例 > 方法
包含字符串
import java.util.regex.Matcher;
import java.util.regex.Pattern;

boolean include(String string, String find, boolean caseInsensitive) {
        if (string == null || find == null || find.isEmpty()) {
            return false;
        }
        try {
            int mode = (caseInsensitive ? Pattern.CASE_INSENSITIVE : 0x00) | Pattern.MULTILINE;
            Pattern pattern = Pattern.compile(find, mode);
            Matcher matcher = pattern.matcher(string);
            return matcher.find();
        } catch (Exception e) {
            return false;
        }
    }

include("Hello1233World", "3{2}", true);
