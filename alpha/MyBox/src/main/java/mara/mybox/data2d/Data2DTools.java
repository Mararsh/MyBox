package mara.mybox.data2d;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javafx.scene.paint.Color;
import mara.mybox.controller.BaseController;
import mara.mybox.data.StringTable;
import mara.mybox.db.data.ColumnDefinition;
import mara.mybox.db.data.ColumnDefinition.ColumnType;
import mara.mybox.db.data.Data2DColumn;
import mara.mybox.dev.MyBoxLog;
import mara.mybox.fxml.FxTask;
import mara.mybox.fxml.style.HtmlStyles;
import mara.mybox.tools.CsvTools;
import mara.mybox.tools.FileTmpTools;
import mara.mybox.tools.FileTools;
import mara.mybox.tools.HtmlWriteTools;
import mara.mybox.tools.JsonTools;
import mara.mybox.tools.StringTools;
import mara.mybox.tools.XmlTools;
import static mara.mybox.tools.XmlTools.cdata;
import mara.mybox.value.AppValues;
import static mara.mybox.value.Languages.message;
import mara.mybox.value.UserConfig;
import org.apache.commons.csv.CSVPrinter;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * @Author Mara
 * @CreateDate 2023-9-12
 * @License Apache License Version 2.0
 */
public class Data2DTools {

    public static List<Data2DColumn> clone(List<Data2DColumn> columns) {
        try {
            if (columns == null) {
                return null;
            }
            List<Data2DColumn> cols = new ArrayList<>();
            int index = 0;
            for (Data2DColumn c : columns) {
                Data2DColumn col = c.cloneAll();
                col.setIndex(index++);
                cols.add(col);
            }
            return cols;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static StringTable validate(List<Data2DColumn> columns) {
        try {
            if (columns == null || columns.isEmpty()) {
                return null;
            }
            List<String> colsNames = new ArrayList<>();
            List<String> tNames = new ArrayList<>();
            tNames.addAll(Arrays.asList(message("ID"), message("Name"), message("Reason")));
            StringTable colsTable = new StringTable(tNames, message("InvalidColumns"));
            for (int c = 0; c < columns.size(); c++) {
                Data2DColumn column = columns.get(c);
                if (!column.valid()) {
                    List<String> row = new ArrayList<>();
                    row.addAll(Arrays.asList(c + 1 + "", column.getColumnName(), message("Invalid")));
                    colsTable.add(row);
                }
                if (colsNames.contains(column.getColumnName())) {
                    List<String> row = new ArrayList<>();
                    row.addAll(Arrays.asList(c + 1 + "", column.getColumnName(), message("Duplicated")));
                    colsTable.add(row);
                }
                colsNames.add(column.getColumnName());
            }
            return colsTable;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static String toString(Data2DColumn column) {
        try {
            if (column == null) {
                return null;
            }
            StringBuilder s = new StringBuilder();
            s.append(message("Name")).append(": ").append(column.getColumnName()).append("\n");
            s.append(message("Type")).append(": ").append(column.getType()).append("\n");
            s.append(message("Length")).append(": ").append(column.getLength()).append("\n");
            s.append(message("Width")).append(": ").append(column.getWidth()).append("\n");
            s.append(message("DisplayFormat")).append(": ").append(column.getFormat()).append("\n");
            s.append(message("NotNull")).append(": ").append(column.isNotNull()).append("\n");
            s.append(message("Editable")).append(": ").append(column.isEditable()).append("\n");
            s.append(message("PrimaryKey")).append(": ").append(column.isIsPrimaryKey()).append("\n");
            s.append(message("AutoGenerated")).append(": ").append(column.isAuto()).append("\n");
            s.append(message("DefaultValue")).append(": ").append(column.getDefaultValue()).append("\n");
            s.append(message("Color")).append(": ").append(column.getColor()).append("\n");
            s.append(message("ToInvalidValue")).append(": ").append(column.getInvalidAs()).append("\n");
            s.append(message("DecimalScale")).append(": ").append(column.getScale()).append("\n");
            s.append(message("Century")).append(": ").append(column.getCentury()).append("\n");
            s.append(message("FixTwoDigitYears")).append(": ").append(column.isFixTwoDigitYear()).append("\n");
            s.append(message("Description")).append(": ").append(column.getDescription()).append("\n");
            return s.toString();
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    /*
       make data2d from
     */
    public static List<Data2DColumn> toColumns(List<String> names) {
        try {
            if (names == null) {
                return null;
            }
            List<Data2DColumn> cols = new ArrayList<>();
            int index = -1;
            for (String c : names) {
                Data2DColumn col = new Data2DColumn(c, ColumnDefinition.ColumnType.String);
                col.setIndex(index--);
                cols.add(col);
            }
            return cols;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static List<Data2DColumn> definition() {
        List<Data2DColumn> columns = new ArrayList<>();
        columns.add(new Data2DColumn(message("ColumnName"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Type"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Length"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Width"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("DisplayFormat"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("NotNull"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("Editable"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("PrimaryKey"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("AutoGenerated"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("DefaultValue"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Color"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("ToInvalidValue"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("DecimalScale"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Century"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("FixTwoDigitYears"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("Description"), ColumnDefinition.ColumnType.String));
        return columns;
    }

    public static DataFileCSV definitionFromXML(FxTask task, BaseController controller, String s) {
        try {
            if (s == null || s.isBlank()) {
                return null;
            }
            Element e = XmlTools.toElement(task, controller, s);
            if (e == null) {
                return null;
            }
            String tag = e.getTagName();
            if (!XmlTools.matchXmlTag("DataDefinition", tag)) {
                return null;
            }
            NodeList children = e.getChildNodes();
            if (children == null) {
                return null;
            }
            DataFileCSV csv = new DataFileCSV();
            for (int dIndex = 0; dIndex < children.getLength(); dIndex++) {
                Node child = children.item(dIndex);
                if (!(child instanceof Element)) {
                    continue;
                }
                Element dElement = (Element) child;
                tag = child.getNodeName();
                if (XmlTools.matchXmlTag("Attributes", tag)) {
                    NodeList attrNodes = dElement.getChildNodes();
                    if (attrNodes == null) {
                        continue;
                    }
                    for (int aIndex = 0; aIndex < attrNodes.getLength(); aIndex++) {
                        Node attrNode = attrNodes.item(aIndex);
                        if (!(attrNode instanceof Element)) {
                            continue;
                        }
                        String attrName = attrNode.getNodeName();
                        if (attrName == null || attrName.isBlank()) {
                            continue;
                        }
                        if (XmlTools.matchXmlTag("Description", attrName)) {
                            csv.setComments(cdata(attrNode));

                        } else if (XmlTools.matchXmlTag("DataName", attrName)) {
                            csv.setDataName(cdata(attrNode));

                        } else {
                            String attrValue = attrNode.getTextContent();
                            if (attrValue == null || attrValue.isBlank()) {
                                continue;
                            }
                            if (XmlTools.matchXmlTag("DecimalScale", attrName)) {
                                try {
                                    csv.setScale(Short.parseShort(attrValue));
                                } catch (Exception ex) {
                                }

                            } else if (XmlTools.matchXmlTag("MaxRandom", attrName)) {
                                try {
                                    csv.setMaxRandom(Integer.parseInt(attrValue));
                                } catch (Exception ex) {
                                }

                            }
                        }
                    }

                } else if (XmlTools.matchXmlTag("ColumnsDefinition", tag)) {
                    NodeList columnNodes = dElement.getChildNodes();
                    if (columnNodes == null) {
                        continue;
                    }
                    List<Data2DColumn> columns = new ArrayList<>();
                    for (int cIndex = 0; cIndex < columnNodes.getLength(); cIndex++) {
                        Node columnNode = columnNodes.item(cIndex);
                        if (!(columnNode instanceof Element)
                                || !XmlTools.matchXmlTag("Column", columnNode.getNodeName())) {
                            continue;
                        }
                        NodeList columnAttributes = columnNode.getChildNodes();
                        if (columnAttributes == null) {
                            continue;
                        }
                        Data2DColumn column = new Data2DColumn();
                        for (int aIndex = 0; aIndex < columnAttributes.getLength(); aIndex++) {
                            Node attrNode = columnAttributes.item(aIndex);
                            if (!(attrNode instanceof Element)) {
                                continue;
                            }
                            String attrName = attrNode.getNodeName();

                            if (attrName == null || attrName.isBlank()) {
                                continue;
                            }
                            if (XmlTools.matchXmlTag("ColumnName", attrName)) {
                                column.setColumnName(cdata(attrNode));

                            } else if (XmlTools.matchXmlTag("DisplayFormat", attrName)) {
                                column.setFormat(cdata(attrNode));

                            } else if (XmlTools.matchXmlTag("DefaultValue", attrName)) {
                                column.setDefaultValue(cdata(attrNode));

                            } else if (XmlTools.matchXmlTag("Description", attrName)) {
                                column.setDescription(cdata(attrNode));

                            } else {
                                String attrValue = attrNode.getTextContent();
                                if (attrValue == null || attrValue.isBlank()) {
                                    continue;
                                }
                                if (XmlTools.matchXmlTag("Type", attrName)) {
                                    column.setType(Data2DColumn.columnType(attrValue));

                                } else if (XmlTools.matchXmlTag("Length", attrName)) {
                                    try {
                                        column.setLength(Integer.parseInt(attrValue));
                                    } catch (Exception ex) {
                                    }

                                } else if (XmlTools.matchXmlTag("Width", attrName)) {
                                    try {
                                        column.setWidth(Integer.parseInt(attrValue));
                                    } catch (Exception ex) {
                                    }

                                } else if (XmlTools.matchXmlTag("NotNull", attrName)) {
                                    column.setNotNull(StringTools.isTrue(attrValue));

                                } else if (XmlTools.matchXmlTag("Editable", attrName)) {
                                    column.setEditable(StringTools.isTrue(attrValue));

                                } else if (XmlTools.matchXmlTag("PrimaryKey", attrName)) {
                                    column.setIsPrimaryKey(StringTools.isTrue(attrValue));

                                } else if (XmlTools.matchXmlTag("AutoGenerated", attrName)) {
                                    column.setAuto(StringTools.isTrue(attrValue));

                                } else if (XmlTools.matchXmlTag("Color", attrName)) {
                                    try {
                                        column.setColor(Color.web(attrValue));
                                    } catch (Exception ex) {
                                    }

                                } else if (XmlTools.matchXmlTag("ToInvalidValue", attrName)) {
                                    column.setInvalidAs(ColumnDefinition.invalidAs(attrValue));

                                } else if (XmlTools.matchXmlTag("DecimalScale", attrName)) {
                                    try {
                                        column.setScale(Integer.parseInt(attrValue));
                                    } catch (Exception ex) {
                                    }

                                } else if (XmlTools.matchXmlTag("Century", attrName)) {
                                    try {
                                        column.setCentury(Integer.parseInt(attrValue));
                                    } catch (Exception ex) {
                                    }

                                } else if (XmlTools.matchXmlTag("FixTwoDigitYears", attrName)) {
                                    column.setFixTwoDigitYear(StringTools.isTrue(attrValue));

                                }
                            }
                        }
                        columns.add(column);
                    }
                    csv.setColumns(columns).setColsNumber(columns.size());
                }
            }
            return csv;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    /*
       convert data2d to
     */
    public static List<String> toNames(List<Data2DColumn> cols) {
        try {
            if (cols == null) {
                return null;
            }
            List<String> names = new ArrayList<>();
            for (Data2DColumn c : cols) {
                names.add(c.getColumnName());
            }
            return names;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static DataFileCSV definitionToCSVFile(Data2D data2d, File file) {
        try {
            if (data2d == null || file == null) {
                return null;
            }
            File tmpFile = FileTmpTools.getTempFile();
            List<Data2DColumn> definition = Data2DTools.definition();
            try (CSVPrinter csvPrinter = new CSVPrinter(new FileWriter(tmpFile,
                    Charset.forName("UTF-8")), CsvTools.csvFormat(",", true))) {
                List<String> row = new ArrayList<>();
                for (Data2DColumn col : definition) {
                    row.add(col.getColumnName());
                }
                csvPrinter.printRecord(row);
                if (UserConfig.getBoolean("Data2DDefinitionExportAtributes", true)) {
                    csvPrinter.printComment("The first row defines attributes of the data. And other rows define columns.");
                    row.clear();
                    row.add(data2d.getDataName());
                    row.add("TableAttributes");
                    row.add(data2d.getMaxRandom() + "");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add("");
                    row.add(data2d.getScale() + "");
                    row.add("");
                    row.add("");
                    row.add(data2d.getComments());
                    csvPrinter.printRecord(row);
                }
                List<Data2DColumn> columns = data2d.getColumns();
                if (columns != null) {
                    for (Data2DColumn col : columns) {
                        row.clear();
                        row.add(col.getColumnName());
                        row.add(col.getType().name());
                        row.add(ColumnType.String == col.getType() ? col.getLength() + "" : "");
                        row.add(col.getWidth() + "");
                        row.add(col.getFormat());
                        row.add(col.isNotNull() ? "1" : "0");
                        row.add(col.isEditable() ? "1" : "0");
                        row.add(col.isIsPrimaryKey() ? "1" : "0");
                        row.add(col.isAuto() ? "1" : "0");
                        row.add(col.getDefaultValue());
                        row.add(col.getColor().toString());
                        row.add(col.getInvalidAs().name());
                        row.add(col.getScale() + "");
                        row.add(col.getCentury() + "");
                        row.add(col.isFixTwoDigitYear() ? "1" : "0");
                        row.add(col.getDescription());
                        csvPrinter.printRecord(row);
                    }
                }
                csvPrinter.flush();
                csvPrinter.close();
            }
            if (!FileTools.override(tmpFile, file, true)) {
                return null;
            }
            DataFileCSV csv = new DataFileCSV();
            csv.setColumns(definition)
                    .setFile(file)
                    .setCharset(Charset.forName("UTF-8"))
                    .setDelimiter(",")
                    .setHasHeader(true)
                    .setColsNumber(definition.size());
            csv.saveAttributes();
            return csv;
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return null;
        }
    }

    public static String definitionToXML(Data2D data2d, boolean withAttributes, String prefix) {
        try {
            if (data2d == null) {
                return null;
            }
            String indent = AppValues.Indent;
            StringBuilder s = new StringBuilder();
            s.append(prefix).append("<").append(XmlTools.xmlTag("DataDefinition")).append(">\n");
            if (withAttributes) {
                s.append(prefix).append(indent).append("<").append(XmlTools.xmlTag("Attributes")).append(">\n");
                String v = data2d.getDataName();
                if (v != null && !v.isBlank()) {
                    s.append(prefix).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("DataName")).append(">")
                            .append("<![CDATA[").append(v).append("]]>")
                            .append("</").append(XmlTools.xmlTag("DataName")).append(">\n");
                }
                s.append(prefix).append(indent).append(indent)
                        .append("<").append(XmlTools.xmlTag("DecimalScale")).append(">")
                        .append(data2d.getScale())
                        .append("</").append(XmlTools.xmlTag("DecimalScale")).append(">\n");
                s.append(prefix).append(indent).append(indent)
                        .append("<").append(XmlTools.xmlTag("MaxRandom")).append(">")
                        .append(data2d.getMaxRandom())
                        .append("</").append(XmlTools.xmlTag("MaxRandom")).append(">\n");
                v = data2d.getComments();
                if (v != null && !v.isBlank()) {
                    s.append(prefix).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("Description")).append(">")
                            .append("<![CDATA[").append(v).append("]]>")
                            .append("</").append(XmlTools.xmlTag("Description")).append(">\n");
                }
                s.append(prefix).append(indent)
                        .append("</").append(XmlTools.xmlTag("Attributes")).append(">\n");
            }
            s.append(prefix).append(indent).append("<").append(XmlTools.xmlTag("ColumnsDefinition")).append(">\n");
            List<Data2DColumn> columns = data2d.getColumns();
            if (columns != null) {
                for (Data2DColumn col : columns) {
                    if (col.getColumnName() == null) {
                        continue;
                    }
                    s.append(prefix).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("Column")).append(">\n");
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("ColumnName")).append(">")
                            .append("<![CDATA[").append(col.getColumnName()).append("]]>")
                            .append("</").append(XmlTools.xmlTag("ColumnName")).append(">\n");
                    if (col.getType() != null) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("Type")).append(">")
                                .append(col.getType().name())
                                .append("</").append(XmlTools.xmlTag("Type")).append(">\n");
                    }
                    if (ColumnType.String == col.getType()) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("Length")).append(">")
                                .append(col.getLength())
                                .append("</").append(XmlTools.xmlTag("Length")).append(">\n");
                    }
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("Width")).append(">")
                            .append(col.getWidth())
                            .append("</").append(XmlTools.xmlTag("Width")).append(">\n");
                    if (col.getFormat() != null) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("DisplayFormat")).append(">");
                        if (ColumnType.Enumeration == col.getType()) {
                            s.append("\n").append(prefix).append(indent).append(indent).append(indent)
                                    .append("<![CDATA[").append(col.getFormat()).append("]]>\n")
                                    .append(indent).append(indent);
                        } else {
                            s.append(col.getFormat());
                        }
                        s.append("</").append(XmlTools.xmlTag("DisplayFormat")).append(">\n");
                    }
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("NotNull")).append(">")
                            .append(col.isNotNull() ? "true" : "false")
                            .append("</").append(XmlTools.xmlTag("NotNull")).append(">\n");
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("Editable")).append(">")
                            .append(col.isEditable() ? "true" : "false")
                            .append("</").append(XmlTools.xmlTag("Editable")).append(">\n");
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("PrimaryKey")).append(">")
                            .append(col.isIsPrimaryKey() ? "true" : "false")
                            .append("</").append(XmlTools.xmlTag("PrimaryKey")).append(">\n");
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("AutoGenerated")).append(">")
                            .append(col.isAuto() ? "true" : "false")
                            .append("</").append(XmlTools.xmlTag("AutoGenerated")).append(">\n");
                    if (col.getDefaultValue() != null) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("DefaultValue")).append(">")
                                .append("<![CDATA[").append(col.getDefaultValue()).append("]]>")
                                .append("</").append(XmlTools.xmlTag("DefaultValue")).append(">\n");
                    }
                    if (col.getColor() != null) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("Color")).append(">")
                                .append(col.getColor())
                                .append("</").append(XmlTools.xmlTag("Color")).append(">\n");
                    }
                    if (col.getInvalidAs() != null) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("ToInvalidValue")).append(">")
                                .append(col.getInvalidAs().name())
                                .append("</").append(XmlTools.xmlTag("ToInvalidValue")).append(">\n");
                    }
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("DecimalScale")).append(">")
                            .append(col.getScale())
                            .append("</").append(XmlTools.xmlTag("DecimalScale")).append(">\n");
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("Century")).append(">")
                            .append(col.getCentury())
                            .append("</").append(XmlTools.xmlTag("Century")).append(">\n");
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("<").append(XmlTools.xmlTag("FixTwoDigitYears")).append(">")
                            .append(col.isFixTwoDigitYear() ? "true" : "false")
                            .append("</").append(XmlTools.xmlTag("FixTwoDigitYears")).append(">\n");
                    if (col.getDescription() != null) {
                        s.append(prefix).append(indent).append(indent).append(indent)
                                .append("<").append(XmlTools.xmlTag("Description")).append(">")
                                .append("<![CDATA[").append(col.getDescription()).append("]]>")
                                .append("</").append(XmlTools.xmlTag("Description")).append(">\n");
                    }
                    s.append(prefix).append(indent).append(indent)
                            .append("</").append(XmlTools.xmlTag("Column")).append(">\n");
                }
            }
            s.append(prefix).append(indent).append("</").append(XmlTools.xmlTag("ColumnsDefinition")).append(">\n");
            s.append(prefix).append("</").append(XmlTools.xmlTag("DataDefinition")).append(">\n");
            return s.toString();
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static String definitionToJSON(Data2D data2d, boolean withAttributes, String prefix) {
        try {
            if (data2d == null) {
                return null;
            }
            String indent = AppValues.Indent;
            StringBuilder s = new StringBuilder();
            s.append(prefix).append("\"").append(message("DataDefinition")).append("\": {\n");
            if (withAttributes) {
                s.append(prefix).append(indent).append("\"").append(message("Attributes")).append("\": {\n");
                String v = data2d.getDataName();
                if (v != null && !v.isBlank()) {
                    s.append(prefix).append(indent).append(indent)
                            .append("\"").append(message("DataName")).append("\": ")
                            .append(JsonTools.encode(v)).append(",\n");
                }
                s.append(prefix).append(indent).append(indent)
                        .append("\"").append(message("DecimalScale")).append("\": ")
                        .append(data2d.getScale()).append(",\n");
                s.append(prefix).append(indent).append(indent)
                        .append("\"").append(message("MaxRandom")).append("\": ")
                        .append(data2d.getMaxRandom());
                v = data2d.getComments();
                if (v != null && !v.isBlank()) {
                    s.append(",\n").append(prefix).append(indent).append(indent)
                            .append("\"").append(message("Description")).append("\": ")
                            .append(JsonTools.encode(v)).append("\n");
                } else {
                    s.append("\n");
                }
                s.append(prefix).append(indent).append("},\n");
            }
            s.append(prefix).append(indent).append("\"").append(message("ColumnsDefinition")).append("\": [\n");
            boolean firstRow = true;
            List<Data2DColumn> columns = data2d.getColumns();
            if (columns != null) {
                for (Data2DColumn col : columns) {
                    if (firstRow) {
                        firstRow = false;
                    } else {
                        s.append(",\n");
                    }
                    s.append(prefix).append(indent).append(indent).append("{").append("\n");
                    if (col.getColumnName() == null) {
                        continue;
                    }
                    s.append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("ColumnName")).append("\": ")
                            .append(JsonTools.encode(col.getColumnName()));
                    if (col.getType() != null) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("Type")).append("\": \"")
                                .append(col.getType().name()).append("\"");
                    }
                    if (ColumnType.String == col.getType()) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("Length")).append("\": ")
                                .append(col.getLength());
                    }
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("Width")).append("\": ")
                            .append(col.getWidth());
                    if (col.getFormat() != null) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("DisplayFormat")).append("\": ")
                                .append(JsonTools.encode(col.getFormat()));
                    }
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("NotNull")).append("\": ")
                            .append(col.isNotNull() ? "true" : "false");
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("Editable")).append("\": ")
                            .append(col.isEditable() ? "true" : "false");
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("PrimaryKey")).append("\": ")
                            .append(col.isIsPrimaryKey() ? "true" : "false");
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("AutoGenerated")).append("\": ")
                            .append(col.isAuto() ? "true" : "false");
                    if (col.getDefaultValue() != null) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("DefaultValue")).append("\": ")
                                .append(JsonTools.encode(col.getDefaultValue()));
                    }
                    if (col.getColor() != null) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("Color")).append("\": \"")
                                .append(col.getColor()).append("\"");
                    }
                    if (col.getInvalidAs() != null) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("ToInvalidValue")).append("\": \"")
                                .append(col.getInvalidAs().name()).append("\"");
                    }
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("DecimalScale")).append("\": ")
                            .append(col.getScale());
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("Century")).append("\": ")
                            .append(col.getCentury());
                    s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                            .append("\"").append(message("FixTwoDigitYears")).append("\": ")
                            .append(col.isFixTwoDigitYear() ? "true" : "false");
                    if (col.getDescription() != null) {
                        s.append(",\n").append(prefix).append(indent).append(indent).append(indent)
                                .append("\"").append(message("Description")).append("\": ")
                                .append(JsonTools.encode(col.getDescription()));
                    }
                    s.append("\n").append(prefix).append(indent).append(indent).append("}");
                }
                s.append("\n").append(prefix).append(indent).append("]\n");
                s.append(prefix).append("}\n");
            }
            return s.toString();
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return null;
        }
    }

    public static String definitionToHtml(Data2D data2d) {
        try {
            if (data2d == null) {
                return null;
            }
            StringTable attrTable = new StringTable();
            List<String> row = new ArrayList<>();
            row.addAll(Arrays.asList(message("DataName"), data2d.getDataName()));
            attrTable.add(row);
            row = new ArrayList<>();
            row.addAll(Arrays.asList(message("DecimalScale"), data2d.getScale() + ""));
            attrTable.add(row);
            row = new ArrayList<>();
            row.addAll(Arrays.asList(message("MaxRandom"), data2d.getMaxRandom() + ""));
            attrTable.add(row);
            row = new ArrayList<>();
            String comments = data2d.getComments();
            if (comments != null && !comments.isBlank()) {
                row.addAll(Arrays.asList(message("Description"),
                        "<PRE><CODE>" + comments + "</CODE></PRE>"));
            }
            attrTable.add(row);
            String html = attrTable.div();

            List<Data2DColumn> columns = data2d.getColumns();
            if (columns == null || columns.isEmpty()) {
                return html;
            }

            List<String> names = new ArrayList<>();
            names.addAll(Arrays.asList(message("ColumnName"), message("Type"),
                    message("Length"), message("Width"), message("DisplayFormat"),
                    message("NotNull"), message("Editable"), message("PrimaryKey"), message("AutoGenerated"),
                    message("DefaultValue"), message("Color"), message("ToInvalidValue"),
                    message("DecimalScale"), message("Century"), message("FixTwoDigitYears"), message("Description")));
            StringTable columnsTable = new StringTable(names);
            for (ColumnDefinition column : columns) {
                row = new ArrayList<>();
                row.add(column.getColumnName());
                row.add(column.getType().name());
                row.add(column.getLength() + "");
                row.add(column.getWidth() + "");
                String s = column.getFormatDisplay();
                row.add(s == null || s.isBlank() ? null : "<PRE><CODE>" + s + "</CODE></PRE>\n");
                row.add(column.isNotNull() ? message("Yes") : "");
                row.add(column.isEditable() ? message("Yes") : "");
                row.add(column.isIsPrimaryKey() ? message("Yes") : "");
                row.add(column.isAuto() ? message("Yes") : "");
                s = column.getDefaultValue();
                row.add(s == null || s.isBlank() ? null : "<PRE><CODE>" + s + "</CODE></PRE>\n");
                row.add(column.getColor().toString());
                row.add(column.getInvalidAs().name());
                row.add(column.getScale() + "");
                row.add(column.getCentury() + "");
                row.add(column.isFixTwoDigitYear() ? message("Yes") : "");
                row.add(column.getDescription());
                columnsTable.add(row);
            }
            html += "<BR>" + StringTable.tableDiv(columnsTable);
            return html;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static DataFileExcel definitionToExcelFile(Data2D data2d, File file) {
        try {
            File tmpFile = FileTmpTools.getTempFile();
            List<Data2DColumn> definition = Data2DTools.definition();
            try (XSSFWorkbook xssfBook = new XSSFWorkbook()) {
                XSSFSheet xssfSheet = xssfBook.createSheet("sheet1");
                xssfSheet.setDefaultColumnWidth(20);
                int rowIndex = 0;

                XSSFRow titleRow = xssfSheet.createRow(rowIndex++);
                XSSFCellStyle horizontalCenter = xssfBook.createCellStyle();
                horizontalCenter.setAlignment(HorizontalAlignment.CENTER);
                for (int i = 0; i < definition.size(); i++) {
                    XSSFCell cell = titleRow.createCell(i);
                    cell.setCellValue(definition.get(i).getColumnName());
                    cell.setCellStyle(horizontalCenter);
                    xssfSheet.autoSizeColumn(i);
                }
                int cellIndex = 0;
                if (UserConfig.getBoolean("Data2DDefinitionExportAtributes", true)) {
                    XSSFRow commentsRow = xssfSheet.createRow(rowIndex++);
                    commentsRow.createCell(0).setCellValue("The first row defines attributes of the data. And other rows define columns.");
                    XSSFRow attributesRow = xssfSheet.createRow(rowIndex++);
                    attributesRow.createCell(cellIndex++).setCellValue(data2d.getDataName());
                    attributesRow.createCell(cellIndex++).setCellValue("TableAttributes");
                    attributesRow.createCell(cellIndex++).setCellValue(data2d.getMaxRandom() + "");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue(data2d.getScale() + "");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue("");
                    attributesRow.createCell(cellIndex++).setCellValue(data2d.getComments());
                }
                List<Data2DColumn> columns = data2d.getColumns();
                if (columns != null) {
                    for (Data2DColumn col : columns) {
                        XSSFRow columnRow = xssfSheet.createRow(rowIndex++);
                        cellIndex = 0;
                        columnRow.createCell(cellIndex++).setCellValue(col.getColumnName());
                        columnRow.createCell(cellIndex++).setCellValue(col.getType().name());
                        columnRow.createCell(cellIndex++).setCellValue(ColumnType.String == col.getType() ? col.getLength() + "" : "");
                        columnRow.createCell(cellIndex++).setCellValue(col.getWidth() + "");
                        columnRow.createCell(cellIndex++).setCellValue(col.getFormat());
                        columnRow.createCell(cellIndex++).setCellValue(col.isNotNull() ? "1" : "0");
                        columnRow.createCell(cellIndex++).setCellValue(col.isEditable() ? "1" : "0");
                        columnRow.createCell(cellIndex++).setCellValue(col.isIsPrimaryKey() ? "1" : "0");
                        columnRow.createCell(cellIndex++).setCellValue(col.isAuto() ? "1" : "0");
                        columnRow.createCell(cellIndex++).setCellValue(col.getDefaultValue());
                        columnRow.createCell(cellIndex++).setCellValue(col.getColor().toString());
                        columnRow.createCell(cellIndex++).setCellValue(col.getInvalidAs().name());
                        columnRow.createCell(cellIndex++).setCellValue(col.getScale() + "");
                        columnRow.createCell(cellIndex++).setCellValue(col.getCentury() + "");
                        columnRow.createCell(cellIndex++).setCellValue(col.isFixTwoDigitYear() ? "1" : "0");
                        columnRow.createCell(cellIndex++).setCellValue(col.getDescription());
                    }
                }
                try (FileOutputStream fileOut = new FileOutputStream(tmpFile)) {
                    xssfBook.write(fileOut);
                }
                xssfBook.close();
            }
            if (!FileTools.override(tmpFile, file, true)) {
                return null;
            }
            DataFileExcel excel = new DataFileExcel();
            excel.setColumns(definition)
                    .setFile(file).setSheet("sheet1")
                    .setHasHeader(true)
                    .setColsNumber(definition.size());
            excel.saveAttributes();
            return excel;
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return null;
        }
    }

    /*
        data
     */
    public static String dataToHtml(Data2D data2d, DataFilter styleFilter,
            boolean isForm, boolean showColumns, boolean showRowNumber, boolean showTitle) {
        if (isForm) {
            return dataToHtmlForm(data2d, styleFilter, showColumns, showRowNumber, showTitle);
        } else {
            return dataToHtmlTable(data2d, styleFilter, showColumns, showRowNumber, showTitle);
        }
    }

    public static String dataToHtmlTable(Data2D data2d, DataFilter styleFilter,
            boolean showColumns, boolean showRowNumber, boolean showTitle) {
        try {
            int rNumber = data2d.tableRowsNumber();
            int cNumber = data2d.tableColsNumber();
            if (rNumber <= 0 || cNumber <= 0) {
                return null;
            }
            List<String> names;
            if (showColumns) {
                names = new ArrayList<>();
                if (showRowNumber) {
                    names.add(message("RowNumber"));
                }
                for (int i = 0; i < cNumber; i++) {
                    names.add(data2d.columnName(i));
                }
            } else {
                names = null;
            }
            String title = null;
            if (showTitle) {
                title = data2d.titleName();
            }
            StringTable table = new StringTable(names, title);

            for (int i = 0; i < rNumber; i++) {
                List<String> htmlRow = new ArrayList<>();
                if (showRowNumber) {
                    htmlRow.add(data2d.rowName(i));
                }
                List<String> dataRow = data2d.getPageData().get(i);
                for (int col = 0; col < cNumber; col++) {
                    String value = dataRow.get(col + 1);
                    if (value == null) {
                        value = "";
                    } else {
                        value = data2d.column(col).format(value);
                    }
                    value = StringTools.replaceHtmlLineBreak(value);
                    String style = data2d.cellStyle(styleFilter, i, data2d.columnName(col));
                    if (style != null && !style.isBlank()) {
                        style = style.replace("-fx-font-size:", "font-size:")
                                .replace("-fx-text-fill:", "color:")
                                .replace("-fx-background-color:", "background-color:")
                                .replace("-fx-font-weight: bolder", "font-weight:bold");
                        value = "<SPAN style=\"" + style + "\">" + value + "</SPAN>";
                    }
                    htmlRow.add(value);
                }
                table.add(htmlRow);
            }
            return table.html();
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static String dataToHtmlForm(Data2D data2d, DataFilter styleFilter,
            boolean showColumns, boolean showRowNumber, boolean showTitle) {
        try {
            int rNumber = data2d.tableRowsNumber();
            int cNumber = data2d.tableColsNumber();
            if (rNumber <= 0 || cNumber <= 0) {
                return null;
            }
            StringBuilder s = new StringBuilder();
            if (showTitle) {
                s.append("<H2>").append(data2d.titleName()).append("</H2>\n");
            }
            for (int r = 0; r < rNumber; r++) {
                StringTable table = new StringTable();
                if (showRowNumber) {
                    List<String> row = new ArrayList<>();
                    row.add(data2d.rowName(r));
                    if (showColumns) {
                        row.add(null);
                    }
                    table.add(row);
                }
                List<String> dataRow = data2d.getPageData().get(r);
                for (int col = 0; col < cNumber; col++) {
                    List<String> htmlRow = new ArrayList<>();
                    if (showColumns) {
                        htmlRow.add(data2d.columnName(col));
                    }
                    String value = dataRow.get(col + 1);
                    if (value == null) {
                        value = "";
                    } else {
                        value = data2d.column(col).format(value);
                    }
                    value = StringTools.replaceHtmlLineBreak(value);
                    String style = data2d.cellStyle(styleFilter, r, data2d.columnName(col));
                    if (style != null && !style.isBlank()) {
                        style = style.replace("-fx-font-size:", "font-size:")
                                .replace("-fx-text-fill:", "color:")
                                .replace("-fx-background-color:", "background-color:")
                                .replace("-fx-font-weight: bolder", "font-weight:bold");
                        value = "<SPAN style=\"" + style + "\">" + value + "</SPAN>";
                    }
                    htmlRow.add(value);
                    table.add(htmlRow);
                }
                s.append(table.div()).append("\n<BR><BR>\n");
            }
            return HtmlWriteTools.html(data2d.titleName(),
                    "utf-8", HtmlStyles.DefaultStyle, s.toString());
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static String dataToTexts(Data2D data2d, String delimiterName,
            boolean isForm, boolean showColumns, boolean showRowNumber, boolean showTitle) {
        if (isForm) {
            return dataToTextsForm(data2d, showColumns, showRowNumber, showTitle);
        } else {
            return dataToTextsTable(data2d, delimiterName, showColumns, showRowNumber, showTitle);
        }
    }

    public static String dataToTextsTable(Data2D data2d, String delimiterName,
            boolean showColumns, boolean showRowNumber, boolean showTitle) {
        String texts = data2d.encodeCSV(null, delimiterName,
                showRowNumber, showColumns, true);
        String title = showTitle ? data2d.titleName() : null;
        if (title != null && !title.isBlank()) {
            return title + "\n\n" + texts;
        } else {
            return texts;
        }
    }

    public static String dataToTextsForm(Data2D data2d,
            boolean showColumns, boolean showRowNumber, boolean showTitle) {
        StringBuilder s = new StringBuilder();
        if (showTitle) {
            s.append(data2d.titleName()).append("\n\n");
        }
        for (int r = 0; r < data2d.tableRowsNumber(); r++) {
            if (showRowNumber) {
                s.append(data2d.rowName(r)).append("\n");
            }
            List<String> drow = data2d.tableRow(r, false, true);
            if (drow == null) {
                continue;
            }
            for (int col = 0; col < data2d.columnsNumber(); col++) {
                if (showColumns) {
                    s.append(data2d.columnName(col)).append(": ");
                }
                String v = drow.get(col);
                if (v == null) {
                    continue;
                }
                s.append(StringTools.replaceLineBreak(v, "\\\\n")).append("\n");
            }
            s.append("\n");
        }
        return s.toString();
    }

}
