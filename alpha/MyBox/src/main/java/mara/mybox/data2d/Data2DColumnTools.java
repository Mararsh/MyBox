package mara.mybox.data2d;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import mara.mybox.data.StringTable;
import mara.mybox.db.data.ColumnDefinition;
import mara.mybox.db.data.ColumnDefinition.ColumnType;
import mara.mybox.db.data.Data2DColumn;
import mara.mybox.dev.MyBoxLog;
import mara.mybox.tools.CsvTools;
import mara.mybox.tools.FileTmpTools;
import mara.mybox.tools.FileTools;
import mara.mybox.tools.JsonTools;
import mara.mybox.value.AppValues;
import static mara.mybox.value.Languages.message;
import org.apache.commons.csv.CSVPrinter;

/**
 * @Author Mara
 * @CreateDate 2023-9-12
 * @License Apache License Version 2.0
 */
public class Data2DColumnTools {

    public static StringTable validate(List<Data2DColumn> columns) {
        try {
            if (columns == null || columns.isEmpty()) {
                return null;
            }
            List<String> colsNames = new ArrayList<>();
            List<String> tNames = new ArrayList<>();
            tNames.addAll(Arrays.asList(message("ID"), message("Name"), message("Reason")));
            StringTable colsTable = new StringTable(tNames, message("InvalidColumns"));
            for (int c = 0; c < columns.size(); c++) {
                Data2DColumn column = columns.get(c);
                if (!column.valid()) {
                    List<String> row = new ArrayList<>();
                    row.addAll(Arrays.asList(c + 1 + "", column.getColumnName(), message("Invalid")));
                    colsTable.add(row);
                }
                if (colsNames.contains(column.getColumnName())) {
                    List<String> row = new ArrayList<>();
                    row.addAll(Arrays.asList(c + 1 + "", column.getColumnName(), message("Duplicated")));
                    colsTable.add(row);
                }
                colsNames.add(column.getColumnName());
            }
            return colsTable;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static List<String> toNames(List<Data2DColumn> cols) {
        try {
            if (cols == null) {
                return null;
            }
            List<String> names = new ArrayList<>();
            for (Data2DColumn c : cols) {
                names.add(c.getColumnName());
            }
            return names;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static List<Data2DColumn> toColumns(List<String> names) {
        try {
            if (names == null) {
                return null;
            }
            List<Data2DColumn> cols = new ArrayList<>();
            int index = -1;
            for (String c : names) {
                Data2DColumn col = new Data2DColumn(c, ColumnDefinition.ColumnType.String);
                col.setIndex(index--);
                cols.add(col);
            }
            return cols;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static List<Data2DColumn> clone(List<Data2DColumn> columns) {
        try {
            if (columns == null) {
                return null;
            }
            List<Data2DColumn> cols = new ArrayList<>();
            int index = 0;
            for (Data2DColumn c : columns) {
                Data2DColumn col = c.cloneAll();
                col.setIndex(index++);
                cols.add(col);
            }
            return cols;
        } catch (Exception e) {
            MyBoxLog.error(e);
            return null;
        }
    }

    public static List<Data2DColumn> definition() {
        List<Data2DColumn> columns = new ArrayList<>();
        columns.add(new Data2DColumn(message("Name"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Type"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Length"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Width"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("DisplayFormat"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("NotNull"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("Editable"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("PrimaryKey"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("AutoGenerated"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("DefaultValue"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Color"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("ToInvalidValue"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("DecimalScale"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("Century"), ColumnDefinition.ColumnType.String));
        columns.add(new Data2DColumn(message("FixTwoDigitYears"), ColumnDefinition.ColumnType.Boolean));
        columns.add(new Data2DColumn(message("Description"), ColumnDefinition.ColumnType.String));
        return columns;
    }

    public static DataFileCSV toCSVFile(List<Data2DColumn> columns, File file) {
        try {
            File tmpFile = FileTmpTools.getTempFile();
            List<Data2DColumn> definition = Data2DColumnTools.definition();
            try (CSVPrinter csvPrinter = new CSVPrinter(new FileWriter(tmpFile,
                    Charset.forName("UTF-8")), CsvTools.csvFormat(",", true))) {
                List<String> row = new ArrayList<>();
                for (Data2DColumn col : definition) {
                    row.add(col.getColumnName());
                }
                csvPrinter.printRecord(row);
                for (Data2DColumn col : columns) {
                    row.clear();
                    row.add(col.getColumnName());
                    row.add(col.getType().name());
                    row.add(ColumnType.String == col.getType() ? col.getLength() + "" : "");
                    row.add(col.getWidth() + "");
                    row.add(col.getFormat());
                    row.add(col.isNotNull() ? "1" : "0");
                    row.add(col.isEditable() ? "1" : "0");
                    row.add(col.isIsPrimaryKey() ? "1" : "0");
                    row.add(col.isAuto() ? "1" : "0");
                    row.add(col.getDefaultValue());
                    row.add(col.getColor().toString());
                    row.add(col.getInvalidAs().name());
                    row.add(col.getScale() + "");
                    row.add(col.getCentury() + "");
                    row.add(col.isFixTwoDigitYear() ? "1" : "0");
                    row.add(col.getDescription());
                    csvPrinter.printRecord(row);
                }
                csvPrinter.flush();
                csvPrinter.close();
            }
            if (!FileTools.rename(tmpFile, file, true)) {
                return null;
            }
            DataFileCSV csv = new DataFileCSV();
            csv.setColumns(definition)
                    .setFile(file)
                    .setCharset(Charset.forName("UTF-8"))
                    .setDelimiter(",")
                    .setHasHeader(true)
                    .setColsNumber(columns.size())
                    .setRowsNumber(columns.size());
            csv.saveAttributes();
            return csv;
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return null;
        }
    }

    public static boolean toXMLFile(List<Data2DColumn> columns, File file) {
        File tmpFile = FileTmpTools.getTempFile();
        try (BufferedWriter xmlWriter = new BufferedWriter(new FileWriter(tmpFile, Charset.forName("UTF-8")))) {
            xmlWriter.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            xmlWriter.write(toXML(columns));
            xmlWriter.flush();
            xmlWriter.close();
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return false;
        }
        return FileTools.rename(tmpFile, file, true);
    }

    public static String toXML(List<Data2DColumn> columns) {
        try {
            String indent = AppValues.Indent;
            StringBuilder s = new StringBuilder();
            s.append("<columns>\n");
            for (Data2DColumn col : columns) {
                if (col.getColumnName() == null) {
                    continue;
                }
                s.append(indent).append("<column>\n");
                s.append(indent).append(indent).append("<name>")
                        .append(col.getColumnName()).append("</name>\n");
                if (col.getType() != null) {
                    s.append(indent).append(indent).append("<type>")
                            .append(col.getType().name()).append("</type>\n");
                }
                if (ColumnType.String == col.getType()) {
                    s.append(indent).append(indent).append("<length>")
                            .append(col.getLength()).append("</length>\n");
                }
                s.append(indent).append(indent).append("<width>")
                        .append(col.getWidth()).append("</width>\n");
                if (col.getFormat() != null) {
                    s.append(indent).append(indent).append("<format>");
                    if (ColumnType.Enumeration == col.getType()) {
                        s.append("\n").append(indent).append(indent).append(indent)
                                .append("<![CDATA[").append(col.getFormat()).append("]]>\n")
                                .append(indent).append(indent);
                    } else {
                        s.append(col.getFormat());
                    }
                    s.append("</format>\n");
                }
                s.append(indent).append(indent).append("<isNotNull>")
                        .append(col.isNotNull() ? "true" : "false").append("</isNotNull>\n");
                s.append(indent).append(indent).append("<isEditable>")
                        .append(col.isEditable() ? "true" : "false").append("</isEditable>\n");
                s.append(indent).append(indent).append("<isPrimaryKey>")
                        .append(col.isIsPrimaryKey() ? "true" : "false").append("</isPrimaryKey>\n");
                s.append(indent).append(indent).append("<isAuto>")
                        .append(col.isAuto() ? "true" : "false").append("</isAuto>\n");
                if (col.getDefaultValue() != null) {
                    s.append(indent).append(indent).append("<defaultValue>")
                            .append("<![CDATA[").append(col.getDefaultValue()).append("]]>")
                            .append("</defaultValue>\n");
                }
                if (col.getColor() != null) {
                    s.append(indent).append(indent).append("<color>")
                            .append(col.getColor()).append("</color>\n");
                }
                if (col.getInvalidAs() != null) {
                    s.append(indent).append(indent).append("<invalidAs>")
                            .append(col.getInvalidAs().name()).append("</invalidAs>\n");
                }
                s.append(indent).append(indent).append("<scale>")
                        .append(col.getScale()).append("</scale>\n");
                s.append(indent).append(indent).append("<century>")
                        .append(col.getCentury()).append("</century>\n");
                s.append(indent).append(indent).append("<isFixTwoDigitYear>")
                        .append(col.isFixTwoDigitYear() ? "true" : "false").append("</isFixTwoDigitYear>\n");
                if (col.getDescription() != null) {
                    s.append(indent).append(indent).append("<description>")
                            .append("<![CDATA[").append(col.getDescription()).append("]]>")
                            .append("</description>\n");
                }
                s.append(indent).append("</column>\n");
            }
            s.append("</columns>\n");
            return s.toString();
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return null;
        }
    }

    public static boolean toJSONFile(List<Data2DColumn> columns, File file) {
        try {
            File tmpFile = FileTmpTools.getTempFile();
            try (BufferedWriter jsonWriter = new BufferedWriter(new FileWriter(tmpFile, Charset.forName("UTF-8")))) {
                jsonWriter.write(toJSON(columns));
                jsonWriter.flush();
                jsonWriter.close();
            }
            return FileTools.rename(tmpFile, file, true);
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return false;
        }
    }

    public static String toJSON(List<Data2DColumn> columns) {
        try {
            String indent = AppValues.Indent;
            StringBuilder s = new StringBuilder();
            s.append("{\"columns\": [\n");
            boolean firstRow = true;
            for (Data2DColumn col : columns) {
                if (firstRow) {
                    firstRow = false;
                } else {
                    s.append(",\n");
                }
                s.append(indent).append("{").append("\n");
                if (col.getColumnName() == null) {
                    continue;
                }
                s.append(indent).append(indent)
                        .append("\"name\": ")
                        .append(JsonTools.encode(col.getColumnName()));
                if (col.getType() != null) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"type\": \"").append(col.getType().name()).append("\"");
                }
                if (ColumnType.String == col.getType()) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"length\": ").append(col.getLength());
                }
                s.append(",\n").append(indent).append(indent)
                        .append("\"width\": ").append(col.getWidth());
                if (col.getFormat() != null) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"format\": ")
                            .append(JsonTools.encode(col.getFormat()));
                }
                s.append(",\n").append(indent).append(indent)
                        .append("\"isNotNull\": ").append(col.isNotNull() ? "true" : "false");
                s.append(",\n").append(indent).append(indent)
                        .append("\"isEditable\": ").append(col.isEditable() ? "true" : "false");
                s.append(",\n").append(indent).append(indent)
                        .append("\"isPrimaryKey\": ").append(col.isIsPrimaryKey() ? "true" : "false");
                s.append(",\n").append(indent).append(indent)
                        .append("\"isAuto\": ").append(col.isAuto() ? "true" : "false");
                if (col.getDefaultValue() != null) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"defaultValue\": ")
                            .append(JsonTools.encode(col.getDefaultValue()));
                }
                if (col.getColor() != null) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"color\": \"").append(col.getColor()).append("\"");
                }
                if (col.getInvalidAs() != null) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"invalidAs\": \"").append(col.getInvalidAs().name()).append("\"");
                }
                s.append(",\n").append(indent).append(indent)
                        .append("\"scale\": ").append(col.getScale());
                s.append(",\n").append(indent).append(indent)
                        .append("\"century\": ").append(col.getCentury());
                s.append(",\n").append(indent).append(indent)
                        .append("\"isFixTwoDigitYear\": ").append(col.isFixTwoDigitYear() ? "true" : "false");
                if (col.getDescription() != null) {
                    s.append(",\n").append(indent).append(indent)
                            .append("\"description\": ")
                            .append(JsonTools.encode(col.getDescription()));
                }
                s.append(indent).append("\n").append(indent).append("}");
            }
            s.append("\n]}\n");
            return s.toString();
        } catch (Exception e) {
            MyBoxLog.error(e.toString());
            return null;
        }
    }

}
